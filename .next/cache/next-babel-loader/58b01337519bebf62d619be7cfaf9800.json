{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nextConnect from 'next-connect';\nimport middleware from '../../../middlewares/middleware';\nimport { extractUser } from '../../../lib/api-helpers';\nimport multer from 'multer';\nimport { v2 as cloudinary } from 'cloudinary';\nconst upload = multer({\n  dest: '/tmp'\n});\nconst handler = nextConnect();\nconst {\n  hostname: cloud_name,\n  username: api_key,\n  password: api_secret\n} = new URL(process.env.CLOUDINARY_URL);\ncloudinary.config({\n  cloud_name,\n  api_key,\n  api_secret\n});\nhandler.use(middleware);\nhandler.get(async (req, res) => res.json({\n  user: extractUser(req)\n}));\nhandler.patch(upload.single('profilePicture'), async (req, res) => {\n  if (!req.user) {\n    req.status(401).end();\n    return;\n  }\n\n  let profilePicture;\n\n  if (req.file) {\n    const image = await cloudinary.uploader.upload(req.file.path, {\n      width: 512,\n      height: 512,\n      crop: 'fill',\n      folder: 'Nextjs-Mongodb-Authentication-App',\n      use_filename: true\n    });\n    profilePicture = image.secure_url;\n  }\n\n  const {\n    name,\n    bio\n  } = req.body;\n  await req.db.collection('users').updateOne({\n    _id: req.user._id\n  }, {\n    $set: _objectSpread({\n      name: name,\n      bio: bio\n    }, profilePicture && {\n      profilePicture\n    })\n  });\n  res.json({\n    user: {\n      name,\n      bio\n    }\n  });\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/Users/kevin/Desktop/Next.js-Mongodb-Authentication-App/pages/api/user/index.js"],"names":["nextConnect","middleware","extractUser","multer","v2","cloudinary","upload","dest","handler","hostname","cloud_name","username","api_key","password","api_secret","URL","process","env","CLOUDINARY_URL","config","use","get","req","res","json","user","patch","single","status","end","profilePicture","file","image","uploader","path","width","height","crop","folder","use_filename","secure_url","name","bio","body","db","collection","updateOne","_id","$set","api","bodyParser"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,EAAE,IAAIC,UAAf,QAAiC,YAAjC;AAEA,MAAMC,MAAM,GAAGH,MAAM,CAAC;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAD,CAArB;AACA,MAAMC,OAAO,GAAGR,WAAW,EAA3B;AAEA,MAAM;AACFS,EAAAA,QAAQ,EAAEC,UADR;AAEFC,EAAAA,QAAQ,EAAEC,OAFR;AAGFC,EAAAA,QAAQ,EAAEC;AAHR,IAIF,IAAIC,GAAJ,CAAQC,OAAO,CAACC,GAAR,CAAYC,cAApB,CAJJ;AAMAb,UAAU,CAACc,MAAX,CAAkB;AACdT,EAAAA,UADc;AAEdE,EAAAA,OAFc;AAGdE,EAAAA;AAHc,CAAlB;AAMAN,OAAO,CAACY,GAAR,CAAYnB,UAAZ;AACAO,OAAO,CAACa,GAAR,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoBA,GAAG,CAACC,IAAJ,CAAS;AAAEC,EAAAA,IAAI,EAAEvB,WAAW,CAACoB,GAAD;AAAnB,CAAT,CAAhC;AAEAd,OAAO,CAACkB,KAAR,CAAcpB,MAAM,CAACqB,MAAP,CAAc,gBAAd,CAAd,EAA+C,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AAC/D,MAAI,CAACD,GAAG,CAACG,IAAT,EAAe;AACXH,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA;AACH;;AAED,MAAIC,cAAJ;;AACA,MAAIR,GAAG,CAACS,IAAR,EAAc;AACV,UAAMC,KAAK,GAAG,MAAM3B,UAAU,CAAC4B,QAAX,CAAoB3B,MAApB,CAA2BgB,GAAG,CAACS,IAAJ,CAASG,IAApC,EAA0C;AAC1DC,MAAAA,KAAK,EAAE,GADmD;AAE1DC,MAAAA,MAAM,EAAE,GAFkD;AAG1DC,MAAAA,IAAI,EAAE,MAHoD;AAI1DC,MAAAA,MAAM,EAAE,mCAJkD;AAK1DC,MAAAA,YAAY,EAAE;AAL4C,KAA1C,CAApB;AAOAT,IAAAA,cAAc,GAAGE,KAAK,CAACQ,UAAvB;AACH;;AAED,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAgBpB,GAAG,CAACqB,IAA1B;AAEA,QAAMrB,GAAG,CAACsB,EAAJ,CAAOC,UAAP,CAAkB,OAAlB,EAA2BC,SAA3B,CACF;AAAEC,IAAAA,GAAG,EAAEzB,GAAG,CAACG,IAAJ,CAASsB;AAAhB,GADE,EAEF;AACIC,IAAAA,IAAI;AACAP,MAAAA,IAAI,EAAEA,IADN;AAEAC,MAAAA,GAAG,EAAEA;AAFL,OAGIZ,cAAc,IAAI;AAAEA,MAAAA;AAAF,KAHtB;AADR,GAFE,CAAN;AAUAP,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAE;AAAEgB,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAAR,GAAT;AACH,CA/BD;AAiCA,OAAO,MAAMvB,MAAM,GAAG;AAClB8B,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAMP,eAAe1C,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nimport middleware from '../../../middlewares/middleware';\nimport { extractUser } from '../../../lib/api-helpers';\nimport multer from 'multer';\nimport { v2 as cloudinary } from 'cloudinary'\n\nconst upload = multer({ dest: '/tmp' });\nconst handler = nextConnect();\n\nconst {\n    hostname: cloud_name,\n    username: api_key,\n    password: api_secret,\n} = new URL(process.env.CLOUDINARY_URL);\n\ncloudinary.config({\n    cloud_name,\n    api_key,\n    api_secret,\n});\n\nhandler.use(middleware);\nhandler.get(async (req, res) => res.json({ user: extractUser(req) }));\n\nhandler.patch(upload.single('profilePicture'), async (req, res) => {\n    if (!req.user) {\n        req.status(401).end();\n        return;\n    }\n\n    let profilePicture;\n    if (req.file) {\n        const image = await cloudinary.uploader.upload(req.file.path, {\n            width: 512,\n            height: 512,\n            crop: 'fill',\n            folder: 'Nextjs-Mongodb-Authentication-App',\n            use_filename: true\n        });\n        profilePicture = image.secure_url;\n    }\n\n    const { name, bio } = req.body;\n\n    await req.db.collection('users').updateOne(\n        { _id: req.user._id },\n        {\n            $set: {\n                name: name,\n                bio: bio,\n                ...(profilePicture && { profilePicture })\n            },\n        },\n    );\n    res.json({ user: { name, bio } });\n});\n\nexport const config = {\n    api: {\n        bodyParser: false,\n    },\n};\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}